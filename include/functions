#!/bin/bash

################################################################################

source /etc/freedom-node/config
source /etc/freedom-node/include/color
source /etc/freedom-node/include/time_fix
source /etc/freedom-node/include/system/info

################################################################################

# home directory
HOME_DIR="$(cat /etc/freedom-node/homedir 2>/dev/null)"
# user
USER_NAME="$(cat /etc/freedom-node/user 2>/dev/null)"

# if missing
if [[ ! -d "$HOME_DIR"/node/ ]] &>/dev/null; then
  # create directory
  mkdir "$HOME_DIR"/node/ &>/dev/null
  chmod 755 "$HOME_DIR"/node/
fi

################################################################################

# if display found, if missing
if [[ -f "$HOME_DIR"/node/display && ! -f /tmp/setfont ]] &>/dev/null; then
  # set console display font
  sudo setfont "${SET_FONT}" 2>/dev/null
  # set temp file, reset on reboot
  echo "${SET_FONT}" >/tmp/setfont 2>/dev/null
fi

PID_OF_DAEMON="$(pidof freedomcoind 2>/dev/null | wc -l)"

################################################################################
# logo, tx colors
################################################################################

# default color (idle)
CB="${GR}"
TX="${GR}"
WC="${GR}"

################################################################################
# freedomcoin price
################################################################################

DATE="$(date '+%s')"
CRYPTO="freedomcoin"
CURRENCY="usd"

# check last price age
PRICE_FILE="$HOME_DIR/node/price.tmp"
# if found
if [ -f "$PRICE_FILE" ]; then
  PRICE_AGE="$(($(echo "$DATE") - $(stat -c '%Y' "$PRICE_FILE" 2>/dev/null || echo 0)))"
else
  PRICE_AGE="9999" # assume it's too old if the file doesn't exist
fi
# if the file is missing or the data is older than 420 seconds, fetch new price
if [ ! -f "$PRICE_FILE" ] || [ "$PRICE_AGE" -gt "900" ]; then
  # fetch the latest price from the coingecko api ##############################
  PRICE=$(timeout 10 curl -s --proxy socks5h://localhost:9050 "https://api.coingecko.com/api/v3/simple/price?ids=$CRYPTO&vs_currencies=$CURRENCY" | jq -r ".$CRYPTO.$CURRENCY")
  ##############################################################################
  echo "$PRICE" >"$PRICE_FILE"
# read the (possibly updated) cached price
fi
FREED_PRICE="$(cat "$PRICE_FILE" 2>/dev/null)"

################################################################################
# freedomcoin watchlist
################################################################################

COINGECKO_AGE="$(($(echo "$DATE") - $(stat -c '%Y' "${HOME_DIR:?}"/node/coingecko 2>/dev/null || echo 0)))"
# if missing, if old
if [[ ! -f "${HOME_DIR:?}"/node/coingecko || "$COINGECKO_AGE" -gt "900" ]] &>/dev/null; then
  # watchlist
  WATCHLIST="$(timeout 10 curl -s --proxy socks5h://localhost:9050 'GET' "https://api.coingecko.com/api/v3/coins/${CRYPTO:?}" -H 'accept:application/json')"
  echo "$WATCHLIST" >"${HOME_DIR:?}"/node/coingecko
  # convert jq -r raw data
  echo "$(jq -r . "${HOME_DIR:?}"/node/coingecko)" >"${HOME_DIR:?}"/node/coingecko
fi

################################################################################
# client data
################################################################################

# client updated data age (seconds)
CLIENT_UPDATED_DATA="$(($(echo "$DATE") - $(stat -c '%Y' "$HOME_DIR"/node/KEK.tmp 2>/dev/null || echo 0)))"

# if older than n, if not syncing
if [[ "$PID_OF_DAEMON" == "1" && "$CLIENT_UPDATED_DATA" -gt "55" && ! "$(tail -1 "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | grep "Loading block index...")" ]] &>/dev/null; then
  echo "CHECKED @ $(date | xargs)" >"$HOME_DIR"/node/KEK.tmp
  # getinfo
  /usr/local/bin/./freedomcoin-cli getinfo 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getinfo.tmp 2>/dev/null && sleep 0.1 ##
  # getwalletinfo
  /usr/local/bin/freedomcoin-cli getwalletinfo 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getwalletinfo.tmp 2>/dev/null && sleep 0.1 ##
  # getbestblockhash
  /usr/local/bin/freedomcoin-cli getbestblockhash 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getbestblockhash.tmp 2>/dev/null && sleep 0.1 ##
  # getmempoolinfo
  /usr/local/bin/freedomcoin-cli getmempoolinfo 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getmempoolinfo.tmp 2>/dev/null && sleep 0.1 ##
  # getpeerinfo
  /usr/local/bin/freedomcoin-cli getpeerinfo 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getpeerinfo.tmp 2>/dev/null && sleep 0.1 ##
  # listunspent
  /usr/local/bin/freedomcoin-cli listunspent 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/listunspent.tmp 2>/dev/null && sleep 0.1 ##
  # getnodeaddresses
  /usr/local/bin/freedomcoin-cli getnodeaddresses 2>/dev/null | grep -v "Error" | grep "address" | awk '{ print $2 }' | tr -d '",' >>/etc/freedom-node/node.peers 2>/dev/null && sleep 0.1 ##
  # if missing, if older than n seconds
  if [[ ! -f "$HOME_DIR"/node/getpatriotnodecount.tmp || "$(stat -c '%Y' "$HOME_DIR"/node/getpatriotnodecount.tmp 2>/dev/null | while read lastedit; do echo "$(($(echo "$DATE") - $lastedit))"; done)" -gt "600" ]] &>/dev/null; then
    # getpatriotnodecount
    /usr/local/bin/freedomcoin-cli getpatriotnodecount 2>/dev/null | grep -v "Error" | tr -d ',}{"' >"$HOME_DIR"/node/getpatriotnodecount.tmp 2>/dev/null && sleep 0.1 ##
  fi
  # version
  if [[ ! -f "$HOME_DIR"/node/version.tmp || ! -s "$HOME_DIR"/node/version.tmp ]] &>/dev/null; then
    /usr/local/bin/./freedomcoin-cli -version 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/version.tmp 2>/dev/null && sleep 0.1 ##
  fi
  # getblockchaininfo
  if [[ ! -f "$HOME_DIR"/node/getblockchaininfo.tmp || ! -s "$HOME_DIR"/node/getblockchaininfo.tmp ]] &>/dev/null; then
    /usr/local/bin/freedomcoin-cli getblockchaininfo 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getblockchaininfo.tmp 2>/dev/null && sleep 0.1 ##
  fi
fi

################################################################################
# data
################################################################################

# create ip4-ip6 list, disregard duplicates ####################################
grep "addr" "$HOME_DIR"/node/getpeerinfo.tmp 2>/dev/null | egrep -v "get|v2|send" | tr -d ',"' | grep "addr:" | awk '{ print $2 }' | egrep -v "[a-z]+" | awk -F: '{ print $1 }' | awk '!a[$0]++' | sort -n >/etc/freedom-node/connected.ip4.peers
grep "addr" "$HOME_DIR"/node/getpeerinfo.tmp 2>/dev/null | egrep -v "get|v2|send" | tr -d ',"' | grep "addr:" | awk '{ print $2 }' | egrep "[a-z]+" | awk -F:15110 '{ print $1 }' | awk '!a[$0]++' | sort -n >/etc/freedom-node/connected.ip6.peers

# combine ip4-ip6 list #########################################################
cat /etc/freedom-node/connected.ip4.peers >/etc/freedom-node/connected.peers 2>/dev/null
cat /etc/freedom-node/connected.ip6.peers >>/etc/freedom-node/connected.peers 2>/dev/null

# movements ####################################################################
ADD_TO_WALLET="$(grep "AddToWallet" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | grep "new" | awk '{ print $3 }' | tail -1)"
LAST_MOVEMENTS="$(tail -1 "$HOME_DIR"/node/movements.tmp 2>/dev/null)"
# if new addtowallet
if [[ ! "$ADD_TO_WALLET" == "$LAST_MOVEMENTS" ]] &>/dev/null; then
  # fetch addtowallet
  grep "AddToWallet" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | grep "new" | awk '{ print $3 }' >>"$HOME_DIR"/node/movements.tmp
fi
WALLET_MOVEMENT="$(wc -l "$HOME_DIR"/node/movements.tmp 2>/dev/null | awk '{ print $1 }')"
WALLET_MOVEMENT_AGE="$(($(echo "$DATE") - $(stat -c '%Y' "$HOME_DIR"/node/movements.tmp 2>/dev/null || echo 0)))"

# proof of stake ###############################################################
BLOCK_WAS_SIGNED="$(grep "BitcoinMiner : proof-of-stake block was signed" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $NF }' | tail -1)"
LAST_PROOF_OF_STAKE="$(tail -1 "$HOME_DIR"/node/stakes.tmp 2>/dev/null)"
# if new signed block
if [[ ! "$BLOCK_WAS_SIGNED" == "$LAST_PROOF_OF_STAKE" ]] &>/dev/null; then
  # fetch signed proof-of-stake block
  grep "BitcoinMiner : proof-of-stake block was signed" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $NF }' >>"$HOME_DIR"/node/stakes.tmp
fi
WALLET_POS="$(wc -l "$HOME_DIR"/node/stakes.tmp 2>/dev/null | awk '{ print $1 }')"
WALLET_POS_AGE="$(($(echo "$DATE") - $(stat -c '%Y' "$HOME_DIR"/node/stakes.tmp 2>/dev/null || echo 0)))"

################################################################################
# repository version
################################################################################

LOC_0="$(wc -l "$HOME_DIR"/freedom-node/* 2>/dev/null | grep "total" | egrep -o "[0-9]+")"
LOC_1="$(wc -l "$HOME_DIR"/freedom-node/*/* 2>/dev/null | grep "total" | egrep -o "[0-9]+")"
LOC_2="$(wc -l "$HOME_DIR"/freedom-node/*/*/* 2>/dev/null | grep "total" | egrep -o "[0-9]+")"
LOC_T="$(echo "$LOC_0+$LOC_1+$LOC_2" | bc 2>/dev/null | sed 's/./&./g;s/\.$//')"

REPO_VERSION="${N0}v$LOC_T"

################################################################################
# date
################################################################################

DATE_CLOCK="$(date '+%D %H:%M:%S' 2>/dev/null)"
SYSTEM_DATE="${GR}$(echo "$DATE_CLOCK" | awk '{ print $1 }')${N0}"
SYSTEM_CLOCK="$(echo "$DATE_CLOCK" | awk '{ print $2 }')"

################################################################################
# movement status
################################################################################

# if zero
if [[ -z "$WALLET_MOVEMENT" ]] &>/dev/null; then
  WALLET_MOVEMENT="0"
fi

# if any movements, less than n age
if [[ "$WALLET_MOVEMENT" -gt "0" && "${WALLET_MOVEMENT_AGE:0}" -lt "3600" ]] &>/dev/null; then
  WALLET_TXLAST="$(tail -1 "$HOME_DIR"/node/movements.tmp 2>/dev/null)${N0}"
  CB="${Y1}"
  TX="${Y1}"
  WC="${Y1}"
  # if greater than n seconds
elif [[ "$WALLET_MOVEMENT" -gt "0" && "${WALLET_MOVEMENT_AGE:0}" -gt "3600" ]] &>/dev/null; then
  WC="${N0}"
fi

################################################################################
# proof of stake status
################################################################################

# if any rewards, less than n age
if [[ "$WALLET_POS" -gt "0" && "${WALLET_POS_AGE:0}" -lt "3600" ]] &>/dev/null; then
  WALLET_TXLAST="$(tail -1 "$HOME_DIR"/node/stakes.tmp 2>/dev/null)${N0}"
  CB="${Y1}"
  TX="${Y1}"
  WC="${Y1}"
  # if any rewards, greater than n age
elif [[ "$WALLET_POS" -gt "0" && "${WALLET_POS_AGE:0}" -gt "3600" ]] &>/dev/null; then
  WC="${N0}"
fi

# if zero
if [[ -z "$WALLET_POS" || "$WALLET_POS" == "0" ]] &>/dev/null; then
  WALLET_POS="0"
fi

# output proof of stake
WALLET_POS="${WC}$WALLET_POS${N0}"

################################################################################

start_patriotnode() {
  # start missing
  /usr/local/bin/freedomcoin-cli startpatriotnode missing 0 >"$HOME_DIR"/node/startpatriotnode.tmp && sleep 0.1
}

################################################################################
# patriotnode status
################################################################################

PATRIOT_STATUS="$(grep -v "Example" "$HOME_DIR"/.trumpcoin/patriotnode.conf 2>/dev/null | egrep -c "mn|MN|pn|PN|:15110" 2>/dev/null)"

# if any data
if [[ "$PATRIOT_STATUS" -gt "0" ]] &>/dev/null; then
  PATRIOT_STATUS="${Y1}P${N0}"
  if [[ ! -f "$HOME_DIR"/node/startpatriotnode.tmp && ! "$(tail -1 "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | grep "Loading block index...")" ]] &>/dev/null; then
    start_patriotnode
  fi
fi

# if zero
if [[ -z "$PATRIOT_STATUS" || "$PATRIOT_STATUS" == "0" ]] &>/dev/null; then
  PATRIOT_STATUS="${GR}P${N0}"
fi

################################################################################
# control status (control wallet)
################################################################################

# patriotnode count
CONTROL_STATUS="$(grep -v "#" "$HOME_DIR"/.trumpcoin/patriotnode.conf 2>/dev/null | egrep -c "mn|MN|pn|PN|:15110")"

# if zero
if [[ "$CONTROL_STATUS" == "0" || "$CONTROL_STATUS" -lt "2" || -z "$CONTROL_STATUS" ]] &>/dev/null; then
  CONTROL_STATUS="${GR}CW${N0}"
fi

if [[ "$CONTROL_STATUS" -ge "2" ]] &>/dev/null; then
  CONTROL_STATUS="${Y1}CW${N0}"
  if [[ ! -f "$HOME_DIR"/node/startpatriotnode.tmp && ! "$(tail -1 "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | grep "Loading block index...")" ]] &>/dev/null; then
    start_patriotnode
  fi
fi

################################################################################
# proof of stake status
################################################################################

POS_STATUS="$(grep -c "Staking Active" "$HOME_DIR"/node/getinfo.tmp 2>/dev/null)"

# if active
if [[ "$POS_STATUS" == "1" || -z "$POS_STATUS" ]] &>/dev/null; then
  POS_STATUS="${G1}S${N0}"
fi

# if zero
if [[ "$POS_STATUS" == "0" ]] &>/dev/null; then
  # if any password set
  if [[ -n "$WALLET_PASSPHRASE" ]] &>/dev/null; then
    # start staking
    /usr/local/bin/freedomcoin-cli walletpassphrase "${WALLET_PASSPHRASE:0}" 0 && sleep 0.1
  fi
  POS_STATUS="${GR}S${N0}"
fi

################################################################################
# tor status (tor)
################################################################################

TOR_STATUS="$(grep "proxy" "$HOME_DIR"/node/getinfo.tmp 2>/dev/null | awk '{ print $2 }' | tr -d '",' | egrep -c "[0-9]+|[A-Z]+|[a-z]")"

# if active
if [[ "$TOR_STATUS" == "1" ]] &>/dev/null; then
  TOR_STATUS="${P1}T${N0}"
fi

# if zero
if [[ -z "$TOR_STATUS" || "$TOR_STATUS" == "0" ]] &>/dev/null; then
  TOR_STATUS="${GR}T${N0}"
fi

################################################################################
# lan status (network interface)
################################################################################

echo "$(ifconfig 2>/dev/null)" >"$HOME_DIR"/node/ifconfig

LAN_STATUS="$(cat "$HOME_DIR"/node/ifconfig 2>/dev/null | head -1 | awk '{ print $1 }' | tr -d ':')"

# if zero
if [[ -z "$LAN_STATUS" ]] &>/dev/null; then
  LAN_STATUS="${GR}nul1${N0}"
else
  LAN_STATUS="${CY}${LAN_STATUS:0:4}${N0}"
fi

################################################################################
# wallet daemon
################################################################################

WALLET_DAEMON="freedomcoind"

################################################################################
# wallet version
################################################################################

WALLET_VERSION="$(tail -1 "$HOME_DIR"/node/version.tmp 2>/dev/null | awk '{ print $NF }')"

# if zero
if [[ -z "$WALLET_VERSION" ]] &>/dev/null; then
  WALLET_VERSION="${GR}Loading..${N0}"
fi

################################################################################
# wallet chain
################################################################################

WALLET_CHAIN="$(grep -w "chain" "$HOME_DIR"/node/getblockchaininfo.tmp 2>/dev/null | awk '{ print $NF }' | tr -d ',"')"

# if main
if [[ "$WALLET_CHAIN" == "main" ]] &>/dev/null; then
  WALLET_CHAIN="${G1}mainnet${N0}"
fi

# if test
if [[ "$WALLET_CHAIN" == "test" ]] &>/dev/null; then
  WALLET_CHAIN="${CY}testnet${N0}"
fi

# if zero
if [[ -z "$WALLET_CHAIN" ]] &>/dev/null; then
  WALLET_CHAIN="${GR}nonet${N0}"
fi

################################################################################
# sync progress
################################################################################

source /etc/freedom-node/include/sync/progress

# sync progress
SYNC_PROGRESS="$(grep -oP 'progress=\K[0-9.]+' "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | tail -1 | tr -d '.')"

# if any data
if [[ "$(grep -c "progress=" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null)" -gt "0" || -n "$LATEST_PROGRESS" ]] &>/dev/null; then
  # if syncing
  if [[ ! "$(echo "$SYNC_PROGRESS" | egrep "[0-9]+.[0-9]+")" == "1000000" || "$LATEST_PROGRESS" < "1.000000" ]] &>/dev/null; then
    # sync progress bar color based on percentage
    WALLET_TXLAST="   ${Y1}${SYNC_PROGRESS_BAR}${N0}"
  fi
fi

################################################################################
# public ip address
################################################################################

# if public missing
if [[ ! -f "$HOME_DIR"/node/wanip.tmp ]] &>/dev/null; then
  PUBLIC_IP="$(curl -s http://whatismyip.akamai.com/)"
  echo "$PUBLIC_IP" >"$HOME_DIR"/node/wanip.tmp
fi

# if proxy missing
if [[ ! -f "$HOME_DIR"/node/proxyip.tmp ]] &>/dev/null; then
  PUBLIC_IP="$(curl -s --proxy socks5h://localhost:9050 http://whatismyip.akamai.com/)"
  echo "$PUBLIC_IP" >"$HOME_DIR"/node/proxyip.tmp
fi

# random start number
RANDOM_PUBLIC_IP=$((((RANDOM % 3) + 1)))

# proxy ip address
if [[ "$RANDOM_PUBLIC_IP" == "1" ]] &>/dev/null; then
  PUBLIC_IP="$(awk NF "$HOME_DIR"/node/proxyip.tmp 2>/dev/null)"
  PUBLIC_IP="${P1}${PUBLIC_IP}${N0:?}"
fi
# onion ip address
if [[ "$RANDOM_PUBLIC_IP" == "2" ]] &>/dev/null; then
  PUBLIC_IP="$(awk NF "$HOME_DIR"/node/onionip.tmp 2>/dev/null)"
  PUBLIC_IP="${P1}${PUBLIC_IP:0:9}...onion${N0:?}"
fi
# wan ip address
if [[ "$RANDOM_PUBLIC_IP" == "3" ]] &>/dev/null; then
  PUBLIC_IP="${CY}$(awk NF "$HOME_DIR"/node/wanip.tmp 2>/dev/null):15110${N0}"
fi
# if zero
if [[ -z "$PUBLIC_IP" || ! -s "$HOME_DIR"/node/wanip.tmp ]] &>/dev/null; then
  PUBLIC_IP="${GR}Updating..${N0}"
fi

################################################################################
# wallet peers total
################################################################################

WALLET_PEERS_TOTAL="$(grep "connections" "$HOME_DIR"/node/getinfo.tmp 2>/dev/null | awk '{ print $NF }' | tr -d ',')"

# if zero
if [[ -z "$WALLET_PEERS_TOTAL" ]] &>/dev/null; then
  WALLET_PEERS_TOTAL="0"
else
  WALLET_PEERS_TOTAL="${G1}$WALLET_PEERS_TOTAL${N0}"
fi

################################################################################
# wallet peers ip4 address
################################################################################

# ip4 address
WALLET_PEERS_IP4="$(wc -l /etc/freedom-node/connected.ip4.peers | awk '{ print $1 }')"

# if zero
if [[ -z "$WALLET_PEERS_IP4" ]] &>/dev/null; then
  WALLET_PEERS_IP4="${GR}0${N0}"
else
  WALLET_PEERS_IP4="${G0}$WALLET_PEERS_IP4${N0}"
fi

################################################################################
# wallet peers ip6 address
################################################################################

# ip6 address
WALLET_PEERS_IP6="$(wc -l /etc/freedom-node/connected.ip6.peers 2>/dev/null | awk '{ print $1 }')"

# if zero
if [[ -z "$WALLET_PEERS_IP6" ]] &>/dev/null; then
  WALLET_PEERS_IP6="${GR}0${N0}"
else
  WALLET_PEERS_IP6="${P1}$WALLET_PEERS_IP6${N0}"
fi

################################################################################
# wallet balances + wallet value
################################################################################

WALLET_BALANCES="$(grep "balance" "$HOME_DIR"/node/getwalletinfo.tmp 2>/dev/null | awk '{ print $NF }' | tr -d ',' | awk '{ SUM += $1} END { print SUM }')"
WALLET_VALUE="$(echo "${WALLET_BALANCES}*${FREED_PRICE}" | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }')"

# if zero
if [[ -z "$WALLET_VALUE" || "$WALLET_VALUE" == "0.00" ]] &>/dev/null; then
  WALLET_VALUE="${GR}0${N0}"
else
  WALLET_VALUE="${G1}$WALLET_VALUE${N0}"
fi

if [[ "$(echo "$WALLET_BALANCES" | awk -F. '{ print $1 }')" -gt "0" ]] &>/dev/null; then
  WALLET_BALANCES="$(echo "$WALLET_BALANCES" | awk '{ printf "%.2f\n", $1 }')"
fi

# if zero
if [[ -z "$WALLET_BALANCES" || "$(echo "$WALLET_BALANCES" | tr -d '.' | sed 's/^0*//')" == "0" || "$WALLET_BALANCES" == "0.00000000" ]] &>/dev/null; then
  WALLET_BALANCES="${GR}0${N0}"
else
  WALLET_BALANCES="${WC}$WALLET_BALANCES${N0}"
fi

################################################################################
# wallet inputs
################################################################################

WALLET_INPUTS="$(grep -c "amount" "$HOME_DIR"/node/listunspent.tmp 2>/dev/null)"

# if zero
if [[ -z "$WALLET_INPUTS" || "$WALLET_INPUTS" == "0" ]] &>/dev/null; then
  WALLET_INPUTS="Inputs ${GR}0${N0}"
else
  WALLET_INPUTS="Inputs $WALLET_INPUTS"
fi

################################################################################
# wallet tx count
################################################################################

WALLET_TXCOUNT="$(grep "txcount" "$HOME_DIR"/node/getwalletinfo.tmp 2>/dev/null | awk '{ print $NF }' | tr -d ',')"

# if zero
if [[ -z "$WALLET_TXCOUNT" || "$WALLET_TXCOUNT" == "0" ]] &>/dev/null; then
  WALLET_TXCOUNT="${GR}0${N0}"
fi

################################################################################
# wallet mempool
################################################################################

WALLET_MEMPOOL="$(grep "size" "$HOME_DIR"/node/getmempoolinfo.tmp 2>/dev/null | awk '{ print $2 }' | tr -d ',')"

# if zero, if syncing
if [[ -z "$WALLET_MEMPOOL" || ! "$(echo "$SYNC_PROGRESS" | egrep "[0-9]+.[0-9]+")" == "1000000" ]] &>/dev/null; then
  WALLET_MEMPOOL="${GR}0${N0}"
fi

# if active
if [[ "$WALLET_MEMPOOL" > "0" ]] &>/dev/null; then
  WALLET_MEMPOOL="${Y1}$WALLET_MEMPOOL${N0}"
fi

################################################################################
# wallet heads
################################################################################

WALLET_HEADS="$(grep "blocks" "$HOME_DIR"/node/getinfo.tmp 2>/dev/null | awk '{ print $NF }' | tr -d ',')"

# if zero
if [[ -z "$WALLET_HEADS" ]] &>/dev/null; then
  WALLET_HEADS="${GR}0${N0}"
fi

################################################################################
# wallet tx last
################################################################################

if [[ -s "$HOME_DIR"/node/getbestblockhash.tmp && "${WALLET_POS_AGE:0}" -gt "3600" && "${WALLET_MOVEMENT_AGE:0}" -gt "3600" && -z "$WALLET_TXLAST" ]] &>/dev/null; then
  # get best block hash
  WALLET_TXLAST="$(tail -1 "$HOME_DIR"/node/getbestblockhash.tmp 2>/dev/null)${N0}"
fi

# if loading block index
if [[ "$(tail -1 "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | grep "Loading block index...")" ]] &>/dev/null; then
  WALLET_TXLAST="   ${CY}Loading${N0}"
  CB="${CY}"
fi

################################################################################

# if zero
if [[ -z "$WALLET_TXLAST" || "$(grep -c "progress=" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null)" == "0" ]] &>/dev/null; then
  WALLET_TXLAST="   ${GR}Loading${N0}"
  CB="${GR}"
fi

################################################################################
# quotes
################################################################################

source /etc/freedom-node/include/timeline

# if enough quotes
if [[ "$(wc -l "$HOME_DIR"/node/quotes 2>/dev/null | awk '{ print $1 }')" -gt "10" ]] &>/dev/null; then
  # random quote log start
  RANDOM_QUOTE_LOG=$((((RANDOM % 2) + 1)))
  if [[ "$RANDOM_QUOTE_LOG" == "1" ]] &>/dev/null; then
    LAST_LOG_QUOTE="1"
  else
    LAST_LOG_QUOTE="0"
  fi
fi

################################################################################
# last log
################################################################################

LAST_LOG="$(tail -1 "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null)"

# if enough quotes
if [[ "$LAST_LOG_QUOTE" == "1" ]] &>/dev/null; then
  # output random quotes
  LAST_LOG="$(sort -R "$HOME_DIR"/node/quotes 2>/dev/null | tail -1)"
  LAST_LOG="${N0}${LAST_LOG:0:171}${N0}"
else
  # output normal node log w size
  LOG_SIZE=$(ls -lSh "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $5 }')
  LAST_LOG="${N0}${LAST_LOG:0:171} log=${LOG_SIZE}${N0}"
fi

# if zero
if [[ -z "$LAST_LOG" ]] &>/dev/null; then
  LAST_LOG="debug.log is empty.."
fi

# if more than n megabytes
if [[ "$(ls -lSh "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $5 }' | tr -d 'M' | awk -F. '{ print $1 }')" -gt "1" ]] &>/dev/null; then
  # trim debug.log
  echo "$(tail -1001 "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null)" >"$HOME_DIR"/.trumpcoin/debug.log
fi

################################################################################
# arp peers list
################################################################################

# if missing
if [[ ! -f /etc/freedom-node/arp.peers ]] &>/dev/null; then
  # create arp list
  cd /tmp || exit && sudo arp-scan "$(echo "$IP_ADDRESS" | egrep -o "[0-9]+.[0-9]+.[0-9]+").0"/24 >/etc/freedom-node/arp.peers
  # fetch ip address, disregard duplicates
  echo "$(awk NF /etc/freedom-node/arp.peers | egrep "[0-9]+.[0-9]+.[0-9]+.[0-9]+" | awk '!a[$0]++')" >/etc/freedom-node/arp.peers
  cd || exit
fi

################################################################################
# failed peers list
################################################################################

# failed, disregard duplicates
grep "failed" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $5 }' | grep "15110" | awk -F:15110 '{ print $1 }' | awk '!a[$0]++' >/etc/freedom-node/failed.peers
# failed after select() (111), disregard duplicates
grep "failed" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $4 }' | grep "15110" | grep -v "to" | awk -F:15110 '{ print $1 }' | awk '!a[$0]++' >>/etc/freedom-node/failed.peers

################################################################################
# addnode onetry
################################################################################

# if found
if [[ -f /etc/freedom-node/node.peers && -f /etc/freedom-node/connected.peers && -f /etc/freedom-node/arp.peers && -f "$HOME_DIR"/.trumpcoin/debug.log ]] &>/dev/null; then

  # sort lists
  echo "$(awk NF /etc/freedom-node/node.peers 2>/dev/null | sort -n | awk '!a[$0]++')" >/etc/freedom-node/node.peers
  echo "$(awk NF /etc/freedom-node/connected.peers 2>/dev/null | sort -n | awk '!a[$0]++')" >/etc/freedom-node/connected.peers
  echo "$(awk NF /etc/freedom-node/arp.peers 2>/dev/null | sort -n | awk '!a[$0]++')" >/etc/freedom-node/arp.peers
  echo "$(awk NF /etc/freedom-node/failed.peers 2>/dev/null | sort -n | awk '!a[$0]++')" >/etc/freedom-node/failed.peers

  # ip address node
  IP_ADDRESS_NODES="$(awk NF /etc/freedom-node/node.peers 2>/dev/null)"
  # ip address arp
  IP_ADDRESS_ARP="$(awk NF /etc/freedom-node/arp.peers 2>/dev/null | awk '{ print $1 }' | egrep -v "[a-z]+" | awk '!a[$0]++')"
  # ip address failed
  IP_ADDRESS_FAILED="$(awk NF /etc/freedom-node/failed.peers 2>/dev/null)"

  # combine nodes and arp peers list
  echo "$IP_ADDRESS_NODES" | awk NF >/etc/freedom-node/addnode
  echo "$IP_ADDRESS_ARP" | awk NF >>/etc/freedom-node/addnode
  # sort, disregard duplicates
  echo "$(sort -n /etc/freedom-node/addnode 2>/dev/null | awk '!a[$0]++')" >/etc/freedom-node/addnode

  # fetch address to add
  IP_ADDRESS_ADDNODE="$(awk NF /etc/freedom-node/addnode 2>/dev/null)"

  # if any data
  if [[ "$(echo "$IP_ADDRESS_FAILED" | egrep -c "[0-9]+|[a-z]+")" -gt "0" ]] &>/dev/null; then
    # disregard failed peers, create addnode
    echo "$(echo "$IP_ADDRESS_ADDNODE" | grep -v "$IP_ADDRESS_FAILED")" >/etc/freedom-node/addnode
    # disregard connected peers, create addnode, disregard duplicates
    echo "$(cat /etc/freedom-node/addnode 2>/dev/null | grep -v /etc/freedom-node/connected.peers 2>/dev/null | awk '!a[$0]++')" >/etc/freedom-node/addnode
  fi

  # fetch random address to add
  IP_ADDRESS_ADDNODE="$(awk NF /etc/freedom-node/addnode 2>/dev/null | sort -R | tail -1)"
  # onetry age (seconds)
  IP_ONETRY_AGE="$(($(echo "$DATE") - $(stat -c '%Y' "$HOME_DIR"/node/onetry.tmp 2>/dev/null || echo 0)))"

  # if missing, if older than n
  if [[ ! -f "$HOME_DIR"/node/onetry.tmp || "$IP_ONETRY_AGE" -gt "180" ]] &>/dev/null; then
    # if any numbers
    if [[ "$(echo "$IP_ADDRESS_ADDNODE" | egrep -c "[0-9]+|[a-z]+")" == "1" ]] &>/dev/null; then
      # addnode onetry
      /usr/local/bin/freedomcoin-cli addnode "$IP_ADDRESS_ADDNODE" onetry 2>/dev/null | grep -v "Error" &
      echo "addnode $IP_ADDRESS_ADDNODE onetry" >"$HOME_DIR"/node/onetry.tmp
    fi
  fi
fi

################################################################################

# reset/remove after midnight
if [[ "$(echo "$SYSTEM_CLOCK" | awk -F: '{ print $1":"$2 }')" == "00:00" ]] &>/dev/null; then
  # reset
  truncate -s 0 "$HOME_DIR"/.trumpcoin/debug.log &>/dev/null
  truncate -s 0 "$HOME_DIR"/node/movements.tmp &>/dev/null
  truncate -s 0 "$HOME_DIR"/node/stakes.tmp &>/dev/null
  # remove
  rm "$HOME_DIR"/node/wanip.tmp &>/dev/null
  rm /etc/freedom-node/arp.peers &>/dev/null
fi

################################################################################

# reset/remove based on age (seconds)
PROXY_IP_AGE="$(($(echo "$DATE") - $(stat -c '%Y' "$HOME_DIR"/node/proxyip.tmp 2>/dev/null || echo 0)))"
# if greater than n seconds
if [[ "$PROXY_IP_AGE" -gt "3600" ]] &>/dev/null; then
  rm "$HOME_DIR"/node/proxyip.tmp &>/dev/null
fi

# END
