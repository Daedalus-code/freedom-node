#!/bin/bash

################################################################################

source /etc/freedom-node/include/color

################################################################################

# home directory
HOME_DIR="$(cat /etc/freedom-node/homedir 2>/dev/null)"
# user
USER_NAME="$(cat /etc/freedom-node/user 2>/dev/null)"

################################################################################
# model & cpu info
################################################################################

VER_FOUND="$(uname -v)"
REL_FOUND="$(uname -r)"
MOD_FOUND="$(grep "Model" /proc/cpuinfo | awk -F: '{ print $2 }' | xargs)"

# if zero
if [[ -z "$MOD_FOUND" ]] &>/dev/null; then
  MOD_FOUND="$(grep "vendor_id" /proc/cpuinfo | awk -F: '{ print $2 }' | head -1 | xargs)"
fi

CPU_FOUND="$(grep "model name" /proc/cpuinfo | head -1 | awk -F: '{ print $2 }' | xargs)"

# if zero
if [[ -z "$CPU_FOUND" ]] &>/dev/null; then
  CPU_FOUND="$(lscpu | grep "Model name" | awk -F: '{ print $2 }' | xargs)"
fi

MHZ_FOUND="$(echo "$(lscpu | grep "MHz" | awk -F: '{ print $2 }' | grep -v "%" | head -1 | awk '{ print $1 }')/1000" | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }') GHz"

# if zero
if [[ -z "$MHZ_FOUND" ]] &>/dev/null; then
  MHZ_FOUND=""
else
  MHZ_FOUND="${CY}$MHZ_FOUND${N0}"
fi

################################################################################
################################################################################

# if missing
if [[ ! -d /home/"$USER_NAME"/node/ ]] &>/dev/null; then
  # create directory
  mkdir /home/"$USER_NAME"/node/ &>/dev/null
  chmod 755 /home/"$USER_NAME"/node/
fi

################################################################################
# system info
################################################################################

BOG_FOUND="$(egrep "bogomips|BogoMIPS" /proc/cpuinfo | awk '{ print $NF }' | head -1)"
COR_FOUND="$(egrep -c "bogomips|BogoMIPS" /proc/cpuinfo)"
MEM_FOUND="$(echo "$(echo "$(grep "MemTotal" /proc/meminfo | awk '{ print $2 }')+"$(grep "SwapTotal" /proc/meminfo | awk '{ print $2 }') | bc -l 2>/dev/null)/1024" | bc 2>/dev/null) MB"
HDD_FOUND="$(df -h --total | tail -1 | xargs | tr -d '-')"
HDD_TOTAL="$(echo "$HDD_FOUND" | awk '{ print $2 }')"
HDD_FREE="$(echo "$HDD_FOUND" | awk '{ print $4 }')"

echo "$MEM_FOUND" >/home/"$USER_NAME"/node/mem.tmp

################################################################################
# bogomips
################################################################################

# if found
if [[ -n "$BOG_FOUND" ]] &>/dev/null; then
  printf '%b' "[  ${G1}OK${N0}  ] BogoMIPS: ${CY}$BOG_FOUND${N0}\n"
else
  printf '%b' "[  ${GR}!!${N0}  ] Error\n" && exit
fi

################################################################################
# kernal release version
################################################################################

# if found
if [[ -n "$VER_FOUND" ]] &>/dev/null; then
  printf '%b' "[  ${G1}OK${N0}  ] $VER_FOUND\n"
else
  printf '%b' "[  ${GR}!!${N0}  ] Error\n" && exit
fi

# if found
if [[ -n "$REL_FOUND" ]] &>/dev/null; then
  printf '%b' "[  ${G1}OK${N0}  ] $REL_FOUND\n"
else
  printf '%b' "[  ${GR}!!${N0}  ] Error\n" && exit
fi

################################################################################
# model
################################################################################

# if found
if [[ -n "$MOD_FOUND" ]] &>/dev/null; then
  printf '%b' "[  ${G1}OK${N0}  ] $MOD_FOUND\n"
else
  printf '%b' "[  ${GR}!!${N0}  ] ${GR}Not found${N0}\n"
fi

################################################################################
# cpu
################################################################################

# if found
if [[ -n "$CPU_FOUND" ]] &>/dev/null; then
  printf '%b' "[  ${G1}OK${N0}  ] $CPU_FOUND $COR_FOUND Core(s) $MHZ_FOUND\n"
else
  printf '%b' "[  ${GR}!!${N0}  ] Error\n" && exit
fi

################################################################################
# memory
################################################################################

# if found
if [[ -n "$MEM_FOUND" ]] &>/dev/null; then
  printf '%b' "[  ${G1}OK${N0}  ] $MEM_FOUND\n"
  # if not enough memory
  if [[ "$(echo "$MEM_FOUND" | awk '{ print $1 }')" -lt "2000" ]] &>/dev/null; then
    printf '%b' "[  ${GR}!!${N0}  ] Not enough memory!\n" && sleep 1
    if [[ "$(echo "$HDD_FREE" | tr -d 'G')" -gt "7" ]] &>/dev/null; then
      printf '%b' "[  ${G1}OK${N0}  ] Creating 2G Swap..\n"
      # create 2G swap #########################################################
      sudo fallocate -l 2G /swapfile
      sudo chmod 600 /swapfile
      sudo mkswap /swapfile
      sudo swapon /swapfile
      ##########################################################################
      # if swapfile is not already in /etc/fstab, append it
      if ! grep -q "^/swapfile swap swap defaults 0 0" /etc/fstab; then
        printf '%b' "[  ${G1}OK${N0}  ] Updating fstab..\n"
        echo "/swapfile swap swap defaults 0 0" | sudo tee -a /etc/fstab >/dev/null
      fi
    else
      printf '%b' "[  ${GR}!!${N0}  ] Not enough space for Swap! ${R1}$HDD_FREE${N0}\n" && sleep 1
    fi
  fi
else
  printf '%b' "[  ${GR}!!${N0}  ] Swap Error\n" && exit
fi

################################################################################
# hard drive
################################################################################

# if found
if [[ -n "$HDD_FOUND" ]] &>/dev/null; then
  printf '%b' "[  ${G1}OK${N0}  ] Total $HDD_TOTAL Free $HDD_FREE\n"
  # if not enough space
  if [[ "$(echo "$HDD_FREE" | tr -d 'G')" -lt "7" ]] &>/dev/null; then
    printf '%b' "[  ${GR}!!${N0}  ] Not enough space..\n" && exit
  fi
  # if tiny sd card found
  if [[ "$(echo "$HDD_TOTAL" | tr -d 'G')" -lt "16" ]] &>/dev/null; then
    printf '%b' "[  ${GR}!!${N0}  ] 16GB SD card recommended.\n" && exit
  fi
else
  printf '%b' "[  ${GR}!!${N0}  ] Error\n" && exit
fi

################################################################################
# missing wallet daemon or client
################################################################################

# if VPS already, skip this
if [[ -d "$HOME_DIR"/freed1 || -d "$HOME_DIR"/trump1 ]] &>/dev/null; then
  echo "[  !!  ] This is a VPS Server already with $(pidof freedomcoind 2>/dev/null | wc -w) nodes running.."
  # remove obsolete dash for vps server
  sudo rm /usr/local/bin/dash &>/dev/null

else

  # if no daemon running
  if [[ "$(pidof freedomcoind 2>/dev/null | wc -l)" == "0" ]] &>/dev/null; then
    # wallet exist
    if [[ -f "$HOME_DIR"/freedomcoind && -f "$HOME_DIR"/freedomcoin-cli ]] &>/dev/null; then
      # install wallet
      sudo cp "$HOME_DIR"/freedomcoin* /usr/local/bin
      sudo chown "$USER_NAME":"$USER_NAME" /usr/local/bin/freedomcoin*
    fi
  fi

  ##############################################################################

  # download wallet
  bash /etc/freedom-node/include/build/download

  ##############################################################################
  # dashbord (dash)
  ##############################################################################

  # install dash
  cd || exit && sudo cp freedom-node/dash /usr/local/bin
  sudo chmod +x "$USER_NAME":"$USER_NAME" /usr/local/bin/dash 2>/dev/null
  sudo chown "$USER_NAME":"$USER_NAME" /usr/local/bin/dash 2>/dev/null

  ##############################################################################
  # touchscreen
  ##############################################################################

  # listen (display)
  sudo chmod +x "$USER_NAME":"$USER_NAME" /etc/freedom-node/include/display/listen 2>/dev/null
  sudo chown "$USER_NAME":"$USER_NAME" /etc/freedom-node/include/display/listen 2>/dev/null

  ##############################################################################
  # proxy (tor) configuration
  ##############################################################################

  # if missing
  if [[ "$(grep -c "FreedomCoin-service" /etc/tor/torrc)" == "0" ]] &>/dev/null; then
    # update tor configuration
    printf '%b' "[  ${GR}!!${N0}  ] Updating configuration!\n"
    echo "HiddenServiceDir /var/lib/tor/FreedomCoin-service/
HiddenServicePort 15110 127.0.0.1:15110" | sudo tee -a /etc/tor/torrc >/dev/null
    # update tor configuration
    printf '%b' "[  ${GR}!!${N0}  ] Restarting tor!\n"
    sudo service tor@default restart
  fi

  ##############################################################################
  # network interface
  ##############################################################################

  # fetch lan from ifconfig
  ifconfig | grep "inet" | egrep -v "prefix|127" | awk '{ print $2 }' >/home/"$USER_NAME"/node/lanip.tmp
  printf '%b' "[  ${G1}OK${N0}  ] ${N0}$(cat /home/"$USER_NAME"/node/lanip.tmp 2>/dev/null)${N0}\n"
  ##############################################################################
  # if missing
  if [[ ! -f /home/"$USER_NAME"/node/wanip.tmp ]] &>/dev/null; then
    # fetch wan from whatismyip
    curl -s http://whatismyip.akamai.com/ >/home/"$USER_NAME"/node/wanip.tmp
  fi
  printf '%b' "[  ${G1}OK${N0}  ] ${CY}$(cat /home/"$USER_NAME"/node/wanip.tmp 2>/dev/null)${N0}\n"
  ##############################################################################
  # if missing
  if [[ ! -f /home/"$USER_NAME"/node/proxyip.tmp ]] &>/dev/null; then
    # fetch wan from whatismyip w proxy
    curl -s --proxy socks5h://localhost:9050 http://whatismyip.akamai.com/ >/home/"$USER_NAME"/node/proxyip.tmp
  fi
  printf '%b' "[  ${G1}OK${N0}  ] ${P0}$(cat /home/"$USER_NAME"/node/proxyip.tmp 2>/dev/null)${N0}\n"
  ##############################################################################
  # if missing
  if [[ ! -f "$HOME_DIR"/node/onionip.tmp ]] &>/dev/null; then
    # fetch onion from hidden service
    sudo cat /var/lib/tor/FreedomCoin-service/hostname >"$HOME_DIR"/node/onionip.tmp
  fi
  printf '%b' "[  ${G1}OK${N0}  ] ${P1}$(cat "$HOME_DIR"/node/onionip.tmp 2>/dev/null)${N0}\n"

  ##############################################################################
  # bootstrap
  ##############################################################################

  bash /etc/freedom-node/include/sync/bootstrap

  ##############################################################################
  # freedomcoin daemon service
  ##############################################################################

  # if missing
  if [[ ! -f /etc/systemd/system/freedomcoind.service ]] &>/dev/null; then

    echo "[Unit]
Description=freedomcoind service
After=network-online.target
Wants=network-online.target
DefaultDependencies=no
Before=shutdown.target reboot.target halt.target

[Service]
Type=simple
User=$USER_NAME
Group=$USER_NAME
ExecStart=/etc/freedom-node/include/start
ExecReload=/etc/freedom-node/include/restart
ExecStop=/usr/local/bin/freedomcoin-cli stop
Restart=on-failure
RestartSec=10
TimeoutStopSec=30
KillMode=process

[Install]
WantedBy=multi-user.target" >/home/"$USER_NAME"/node/service.tmp

    # install service
    sudo mv /home/"$USER_NAME"/node/service.tmp /etc/systemd/system/freedomcoind.service &>/dev/null
    # enable service
    printf '%b' "[  ${G1}OK${N0}  ] Enabling FreedomCoin service..\n"
    sudo systemctl daemon-reload
    sudo systemctl enable freedomcoind
  fi

  ##############################################################################
  # freedomcoin display service
  ##############################################################################

  TOUCHSCREEN="$(dmesg | grep 'touchscreen')"

  # touchscreen?
  if [ ! -z "$TOUCHSCREEN" ]; then
    echo "$TOUCHSCREEN" >"$HOME_DIR"/node/display
    DISPLAY_DETECTED="1"
  fi

  # check if display is connected
  if [[ "$DISPLAY_DETECTED" == "1" ]] &>/dev/null; then
    printf '%b' "[  ${G1}OK${N0}  ] Touchscreen detected! (high probability to be a TFT/LCD screen)\n"
    if [ -d "/sys/class/graphics/fb1" ]; then
      printf '%b' "[  ${G1}OK${N0}  ] Secondary framebuffer found! (TFT/LCD screen would be fb1, unless more than one monitor.)\n"
    fi

    # if missing
    if [[ ! -d "$HOME_DIR"/LCD-show ]] &>/dev/null; then
      # install necessary packages
      sudo apt install raspberrypi-kernel-headers -y
      # clone and install the driver
      cd || exit
      git clone https://github.com/goodtft/LCD-show.git
      cd LCD-show/ || exit
      # for a common 3.5" screen (change this depending on your model)
      chmod +x LCD35-show
      sudo ./LCD35-show
    fi

    # display detected
    DISPLAY_RESOLUTION="$(cat /sys/class/graphics/fb1/virtual_size 2>/dev/null | tr ',' 'x')"

    # if zero
    if [[ -z "$DISPLAY_RESOLUTION" ]] &>/dev/null; then
      DISPLAY_RESOLUTION="Not found.."
    fi

    printf '%b' "[  ${G1}OK${N0}  ] Display resolution: ${CY}${DISPLAY_RESOLUTION}${N0}\n"

    # if service doesn't exist, create it
    if [[ ! -f /etc/systemd/system/freedomnode.service ]] &>/dev/null; then

      cat <<EOF >/home/"$USER_NAME"/node/service.tmp
[Unit]
Description=FreedomNode Startup Script
After=network.target

[Service]
Type=simple
User=$USER_NAME
WorkingDirectory=/usr/local/bin
ExecStart=/bin/bash -c '/usr/local/bin/dash > /dev/tty1 2>&1'
StandardOutput=inherit
StandardError=inherit
Restart=always

[Install]
WantedBy=multi-user.target
EOF

      # install service
      sudo mv /home/"$USER_NAME"/node/service.tmp /etc/systemd/system/freedomnode.service
      printf '%b' "[  ${G1}OK${N0}  ] Enabling display service..\n"
      # apply service + disable getty on tty1
      sudo systemctl daemon-reexec
      sudo systemctl daemon-reload
      sudo systemctl enable freedomnode
      sudo systemctl disable getty@tty1.service
      sudo systemctl mask getty@tty1.service

      # cmdline.txt
      CMDLINE_FILE="/boot/cmdline.txt"
      # if missing
      if [[ "$(cat "$CMDLINE_FILE" | grep -c "PARTUUID")" == "0" ]] &>/dev/null; then
        CMDLINE_FILE="/boot/firmware/cmdline.txt"
      fi
      ##########################################################################
      # check if logo.nologo is already there
      if ! grep -q "logo.nologo" "$CMDLINE_FILE"; then
        sudo sed -i 's/$/ logo.nologo/' "$CMDLINE_FILE"
        printf '%b' "[  ${G1}OK${N0}  ] Added 'logo.nologo' to cmdline.txt..\n"
      fi
      ##########################################################################
      # check if quiet loglevel=0 is already there
      if ! grep -q "quiet loglevel=0" "$CMDLINE_FILE"; then
        sudo sed -i 's/$/ quiet loglevel=0/' "$CMDLINE_FILE"
        printf '%b' "[  ${G1}OK${N0}  ] Added 'quiet loglevel=0' to cmdline.txt..\n"
      fi
      ##########################################################################
      printf '%b' "[  ${N0}!!${N0}  ] Please reboot..\n"
    fi
  fi

  ##############################################################################
  # freedomcoin start
  ##############################################################################

  # daemon running
  if [[ "$(pidof freedomcoind 2>/dev/null | wc -l)" -gt "0" ]] &>/dev/null; then
    printf '%b' "[  ${G1}OK${N0}  ] Already running! PID: ${G1}$(pidof freedomcoind)${N0}\n"
    printf '%b' "[  ${G1}OK${N0}  ] Run ${CY}dash${N0} to monitor!\n"
  else
    # start service
    sudo service freedomcoind restart
  fi
fi

# END
